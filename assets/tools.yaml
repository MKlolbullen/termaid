# =====================  Discovery  =====================

subfinder:
  cat: discovery
  in:  domain
  out: hosts
  def: ["-silent","-json","-o","-","$(target)"]
  params:
    threads:   {type: int,  default: 25, doc: "Concurrent DNS look-ups"}
    timeout:   {type: int,  default: 30, doc: "Seconds before query timeout"}

assetfinder:
  cat: discovery
  in:  domain
  out: hosts
  def: ["--subs-only","$(target)"]

jsubfinder:
  cat: discovery
  in:  domain
  out: hosts
  def: ["-d","$(target)","-o","-"]

bbot:
  cat: discovery
  in:  domain
  out: urls
  def: ["bbot","-t","$(target)","--output","-","--output-format","json"]
  params:
    modules:
      type: enum
      default: "dns,whois,ip"
      values: ["dns","whois","ip","subjack"]
      doc:  "Built-in BBOT modules"

uncover:
  cat: discovery
  in:  domain
  out: hosts
  def: ["-q","$(target)","-json"]
  params:
    engine:
      type: enum
      default: "shodan"
      values: ["shodan","fofa","censys"]
      doc:  "Data source"

cariddi:
  cat: discovery
  in:  urls
  out: urls
  def: ["scan","-input","$(target_file)","-o","-","-silent"]
  params:
    depth:     {type: int, default: 2, doc: "Link-follow depth"}
    threads:   {type: int, default: 30, doc: "Concurrency"}

# =====================  Port / network  =================

naabu:
  cat: portscan
  in:  hosts
  out: ports
  def: ["-json","-o","-","-host","$(target)"]
  params:
    top_ports: {type: int,  default: 1000,  doc: "Only scan N common ports"}
    rate:      {type: int,  default: 15000, doc: "Packets per second"}

masscan:
  cat: portscan
  in:  hosts
  out: ports
  def: ["$(target)","-p1-65535","--rate","10000","-oJ","-"]
  params:
    rate: {type: int, default: 10000, doc: "Packets per second"}

rustscan:
  cat: portscan
  in:  hosts
  out: ports
  def: ["-a","$(target)","-g","--","-sV","-oX","-"]
  params:
    scripts:   {type: bool, default: false, doc: "Run default nmap NSE scripts"}

fping:
  cat: portscan
  in:  hosts
  out: hosts
  def: ["-a","-q","$(target_file)"]

# =====================  Fingerprinting  =================

httpx:
  cat: fingerprint
  in:  hosts
  out: urls
  def: ["-json","-title","-status-code","-server","-o","-","-l","$(target_file)"]
  params:
    threads:   {type: int,  default: 50,   doc: "Concurrency"}
    probes:    {type: bool, default: true, doc: "Enable title/server probes"}

dnsx:
  cat: fingerprint
  in:  hosts
  out: hosts
  def: ["-json","-o","-","-l","$(target_file)"]

whatweb:
  cat: fingerprint
  in:  url
  out: findings
  def: ["-q","--log-json=-","$(target)"]

wappalyzer:
  cat: fingerprint
  in:  url
  out: findings
  def: ["--quiet","--pretty","$(target)"]

# =====================  Vulnerability scanning  =========

nuclei:
  cat: vulnscan
  in:  urls
  out: findings
  def: ["-silent","-stats","-json","-o","-","-l","$(target_file)"]
  params:
    severity:
      type: enum
      default: "medium,high,critical"
      values: ["info","low","medium","high","critical"]
      doc:  "Severity filter"
    rate:      {type: int, default: 100, doc: "Requests per second"}

dalfox:
  cat: vulnscan
  in:  urls
  out: findings
  def: ["file","$(target_file)","--format","json","--silent"]
  params:
    threads:   {type: int,  default: 20, doc: "Concurrency"}
    blind:     {type: bool, default: false, doc: "Enable blind XSS"}

xsrfprobe:
  cat: vulnscan
  in:  urls
  out: findings
  def: ["-l","$(target_file)","-json","-o","-"]

xsstrike:
  cat: vulnscan
  in:  url
  out: findings
  def: ["-u","$(target)","--crawl","--json-log","-"]

corsy:
  cat: vulnscan
  in:  urls
  out: findings
  def: ["-i","$(target_file)","-o","-","-j"]

# =====================  Secrets scanning  ===============

trufflehog:
  cat: secrets
  in:  repo
  out: findings
  def: ["filesystem","$(target)","--json"]
  params:
    depth:     {type: int,  default: 50,  doc: "Git history depth"}
    only_verify: {type: bool, default: false, doc: "Skip fingerprinting"}

# =====================  Utility / transform  ============

unfurl:
  cat: utility
  in:  url
  out: url
  def: ["-u","$(target)"]

cloakquest3r:
  cat: utility
  in:  hosts
  out: hosts
  def: ["--input","$(target_file)","--output","-"]

sortuniq:
  cat: utility
  in:  any
  out: any
  def: ["bash","-c","sort -u | LC_ALL=C sort"]

# =====================  Custom / user  ==================

myriddi:
  cat: custom
  in:  urls
  out: urls
  def: ["myriddi","scan","-in","$(target_file)","-out","-","-json"]
  params:
    threads:   {type: int,  default: 20, doc: "Concurrent threads"}
    depth:     {type: int,  default: 2,  doc: "Crawl depth"}
    headless:  {type: bool, default: false, doc: "Use headless browser"}
